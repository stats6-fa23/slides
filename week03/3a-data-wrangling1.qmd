---
title: "Data Wrangling <br> Part I"
author: "Dr. Mine Dogucu"
execute:
  echo: true
format: 
  revealjs:
    footer: "[introdata.science](https://introdata.science)"
    slide-number: true
    incremental: true
    theme: ["../templates/slide-style.scss"]
    logo: "https://www.introdata.science/img/logo.png"
    title-slide-attributes: 
      data-background-image: "https://www.introdata.science/img/logo.png"
      data-background-size: 5%
      data-background-position: 50% 85%
    include-after-body: "../templates/clean_title_page.html"
---

```{r}
#| echo: false
library(tidyverse)
library(janitor)
options(scipen = 999)
```

# Three solutions to a single problem

What is the average of 4, 8, 16 approximately?

##

1.What is the average of <u>4, 8, 16</u> approximately?

. . .

2.What is the <u>average</u> of 4, 8, 16 approximately?

. . .

3.What is the average of 4, 8, 16 <u>approximately</u>?



## Solution 1: Functions within Functions


```{r}
c(4, 8, 16)
```

. . .

<hr>

```{r}
mean(c(4, 8, 16))
```

. . .

<hr>

```{r}
round(mean(c(4, 8, 16)))
```


##

**Problem with writing functions within functions**

Things will get messy and more difficult to read and debug as we deal with more complex operations on data.



## Solution 2: Creating Objects



```{r}
numbers <- c(4, 8, 16)
numbers
```

. . .

<hr>

```{r}
avg_number <- mean(numbers)
avg_number
```

. . .

<hr>

```{r}
round(avg_number)
```

##

**Problem with creating many objects**

We will end up with too many objects in `Environment`. 


## Solution 3: The (forward) Pipe Operator |> 

:::{.font75}
Shortcut: <br>Ctrl (Command) + Shift + M
:::

## 

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/base-r-setting.png")
```

Make sure to select `Use native pipe operator` under `Tools > Global Options > Code`

##

::::{.columns}

:::{.column width="50%"}

```{r}
c(4, 8, 16) |> 
  mean() |> 
  round()
```

:::

:::{.column width="50%"}
Combine 4, 8, and 16 `and then`  
Take the mean   `and then`  
Round the output
:::

::::

. . .

The output of the first function is the first argument of the second function.

##

Do you recall composite functions such as $f \circ g(x)$?

. . .

Now we have $f \circ g \circ h (x)$  
or `round(mean(c(4, 8, 16)))`

. . .


::::{.columns}

:::{.column width="50%"}


```{r}
#| eval: false
h(x) |> 
  g() |> 
  f()
```

:::

:::{.column width="50%"}

```{r}
#| eval: false
c(4, 8, 16) |> 
  mean() |> 
  round()
```


:::

::::


## Data

```{r echo = FALSE, message = FALSE}
lapd <- read_csv(here::here("data/Police_Payroll.csv")) 
```


```{r}
glimpse(lapd)
```

Note that this data does not have documentation in R but the [documentation](https://controllerdata.lacity.org/Payroll/Police-Payroll/sxpf-rh6t) can be found online. 

##


```{r}

lapd <- clean_names(lapd)
glimpse(lapd)
```

The `clean_names()` function changes all variable names to tidyverse style. 

# Subsetting Data Frames

## subsetting variables/columns

```{r}
#| echo: false
knitr::include_graphics("img/data-wrangle.001.jpeg")
```

. . .

Column-wise subsetting can be done using `select()`.

## subsetting observations/rows

```{r}
#| echo: false
knitr::include_graphics("img/data-wrangle.002.jpeg")
```

. . .
Row-wise subsetting can be done with `slice()` and `filter()` 

##


`select` is used to select certain variables in the data frame. 

::::{.columns}
:::{.column width=50%"}
```{r}
select(lapd, year, base_pay)
```
:::


:::{.column width=50%"}

```{r}
lapd |> 
  select(year, base_pay)
```

:::
::::

##

`select` can also be used to drop certain variables if used with a negative sign.

```{r}
select(lapd, -row_id, -department_title)
```

## Selection helpers

`starts_with()`  
`ends_with()`  
`contains()`  

##

```{r}
select(lapd, starts_with("q"))
```

##

```{r}
select(lapd, ends_with("pay"))
```

##

```{r}
select(lapd, contains("pay"))
```

##

`slice()` subsets rows based on a row number.

The data below include all the rows from third to seventh, including the third and the seventh.

```{r}
slice(lapd, 3:7)
```

## 

::::{.columns}


:::{.column width="50%"}

### Relational Operators in R


| Operator | Description              |
|----------|--------------------------|
| <        | Less than                |
| >        | Greater than             |
| <=       | Less than or equal to    |
| >=       | Greater than or equal to |
| ==       | Equal to                 |
| !=       | Not equal to             |

:::

:::{.column width="50%"}

### Logical Operators in R

| Operator | Description |
|----------|-------------|
| &        | and         |
| &#124;   | or          |

:::
::::




##

`filter()` subsets rows based on a condition.

The data below includes rows when the recorded year is 2018.

```{r}
filter(lapd, year == 2018)
```

##

Q. How many LAPD staff members had a base pay higher than $100,000 in year 2018 according to this data?

##

```{r}
lapd |> 
  filter(year == 2018 & base_pay > 100000)
```

##

```{r}
lapd |> 
  filter(year == 2018 & base_pay > 100000) |> 
  nrow()
```

##

Q. How many observations are available between 2013 and 2015 including 2013 and 2015?

. . .

```{r}
lapd |> 
  filter(year >= 2013 & year <= 2015) 
```

##

```{r}
lapd |> 
  filter(year >= 2013 & year <= 2015) |> 
  nrow()
```

##

Q. How many LAPD staff were employed full time in 2018?



```{r}
lapd |> 
  filter(employment_type == "Full Time" & year == 2018) |> 
  nrow()
```

##


We have done all sorts of selections, slicing, filtering on `lapd` but it has not changed at all. Why do you think so?

```{r}
glimpse(lapd)
```

##


Moving forward we are only going to focus on year 2018, and use `job_class_title`, `employment_type`, and `base_pay`. Let's clean our data accordingly and move on with the smaller `lapd` data that we need.

##

```{r}
lapd |> 
  filter(year == 2018) |> 
  select(job_class_title, 
         employment_type, 
         base_pay)
```

##

```{r}
lapd <- 
  lapd |> 
  filter(year == 2018) |> 
  select(job_class_title, 
         employment_type, 
         base_pay)
```

##

```{r}
glimpse(lapd)
```

# Changing Variables

##

**Goal**: 

Create a new variable called `base_pay_k` that represents `base_pay` in thousand dollars.

## 


```{r}
lapd |> 
  mutate(base_pay_k = base_pay/1000)
```

##

**Goal**: 

Create a new variable called `base_pay_level` which has `Less Than 0`, `No Income`, `Less than 100K and Greater than 0` and `Greater than 100K`. 


##

Let's first check to see there is anyone earning exactly 100K.

```{r}
lapd |> 
  filter(base_pay == 100000)
```

##

```{r}
lapd |> 
  mutate(base_pay_level = case_when(
    base_pay < 0 ~ "Less than 0", 
    base_pay == 0 ~ "No Income",
    base_pay < 100000 & base_pay > 0 ~ "Between 0 and 100K",
    base_pay > 100000 ~ "Greater than 100K")) 
```

## 

We can use pipes with ggplot too! 

```{r}
#| output-location: column
lapd |> 
  mutate(base_pay_level = case_when(
    base_pay < 0 ~ "Less than 0", 
    base_pay == 0 ~ "No Income",
    base_pay < 100000 & base_pay > 0 ~ "Between 0 and 100K",
    base_pay > 100000 ~ "Greater than 100K")) |> 
  ggplot(aes(x = base_pay_level)) +
  geom_bar()
```

##

**Goal**: 

Make `job_class_title` and `employment_type` factor variables.

##

```{r}
lapd |> 
  mutate(employment_type = as.factor(employment_type),
         job_class_title = as.factor(job_class_title)) 
```

##


`as.factor()` - makes a vector factor  
`as.numeric()` - makes a vector numeric  
`as.integer()` - makes a vector integer  
`as.double()` - makes a vector double  
`as.character()` - makes a vector character  

##

Once again we did not "save"
anything into `lapd`. As we work on data cleaning it makes sense not to "save" the data frames. Once we see the final data frame we want then we can "save" (i.e. overwrite) it.

. . .

In your lecture notes, you can do all the changes in this lecture in one long set of piped code. That's the beauty of piping!


##

```{r}
#| eval: false
lapd <- 
  lapd |> 
  clean_names() |> 
  filter(year == 2018) |> 
  select(job_class_title, 
         employment_type, 
         base_pay) |> 
  mutate(employment_type = as.factor(employment_type),
         job_class_title = as.factor(job_class_title),
         base_pay_level = case_when(
           base_pay < 0 ~ "Less than 0", 
           base_pay == 0 ~ "No Income",
           base_pay < 100000 & base_pay > 0 ~ "Between 0 and 100K",
           base_pay > 100000 ~ "Greater than 100K")) 
```

##

::: callout-warning

The functions `clean_names()`, `select()`, `filter()`, `mutate()` all take a data frame as the first argument. Even though we do not see it, the data frame is piped through from the previous step of code at each step. 
When we use these functions without the `|>` we have to include the data frame explicitly.

::::{.columns}
:::{.column width="50%"}
Data frame is used as the first argument
```{r}
#| eval: false
clean_names(lapd)
```
:::

:::{.column width="50%"}
Data frame is piped

```{r}
#| eval: false
lapd |> 
  clean_names()
```
:::
::::
:::
